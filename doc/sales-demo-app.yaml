apiVersion: v1
kind: Template
metadata:
  name: sales-demo-app
  annotations:
    openshift.io/display-name: "Sales Demo Application Templates."
    description: "Sales Demo Application Templates."
    iconClass: "icon-stackoverflow"
parameters:
- name: OCP_DEVOPS_PROJECT_ID
  description: OpenShift DevOps Project Identier
  displayName:
  required: true
  value: devops-tools
- name: APP_NAME
  description: The name assigned to all of the application objects defined in this template.
  displayName: Application Name
  required: true
  value: sales-demo-app
- name: APP_NAME_DEV
  description: The name assigned to all of the application objects defined in this template.
  displayName: DEV Application Name
  required: true
  value: sales-demo-app-dev
- name: APP_NAME_PRE
  description: The name assigned to all of the application objects defined in this template.
  displayName: PRE Application Name
  required: true
  value: sales-demo-app-pre
- name: APP_NAME_PRO
  description: The name assigned to all of the application objects defined in this template.
  displayName: PRO Application Name
  required: true
  value: sales-demo-app-pro
- name: GIT_SOURCE_URL
  description: The source URL for the application
  displayName: Source URL
  required: true
  value: https://github.com/jlbuenosvinos/ocp-microservices-ddd.git
- name: GIT_SOURCE_REF
  description: The source Ref for the application
  displayName: Source Ref
  required: true
  value: dev
- description: A secret string used to configure the Generic webhook.
  displayName: Generic Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GENERIC_WEBHOOK_SECRET
  required: true
objects:
- apiVersion: "v1"
  kind: "BuildConfig"
  metadata:
    name: "sales-scale-service-pipeline"
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          try {
            node {
              stage("INIT") {
              }
            }
            node("maven") {

              stage("SCALE-SERVICE") {

                  openshift.withCluster() {

                    openshift.withCredentials() {

                        openshift.withProject('${APP_NAME_DEV}') {

                          def stockProcessorServiceDeploymentConfig = openshift.selector('dc','${SERVICE_NAME}-${SERVICE_VERSION}')
                          def scaleResult = openshift.raw('scale','dc/${SERVICE_NAME}-${SERVICE_VERSION} --replicas=${SERVICE_REPLICAS}')
                          echo "Service [${SERVICE_NAME}] has been scaled to [${SERVICE_REPLICAS}] replicas."

                          def latestDeploymentVersion = openshift.selector('dc',"${SERVICE_NAME}-${SERVICE_VERSION}").object().status.latestVersion
                          def rc = openshift.selector('rc', "${SERVICE_NAME}-${SERVICE_VERSION}-${latestDeploymentVersion}")

                          rc.untilEach(1) {
                            def rcMap = it.object()
                            return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
                          }

                        }
                    }

                  }
              }
            }

            node {
              stage("FINISH") {
              }
            }

          }
          catch (err) {
            echo "in catch block"
            echo "Caught: ${err}"
            currentBuild.result = 'FAILURE'
            throw err
          }
        type: JenkinsPipeline
    triggers:
      - generic:
          allowEnv: true
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
- apiVersion: "v1"
  kind: "BuildConfig"
  metadata:
    name: "sales-autoscale-service-pipeline"
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          try {
            node {
              stage("INIT") {
              }
            }
            node("maven") {

              stage("SET-AUTO-SCALE-SERVICE") {

                  openshift.withCluster() {

                    openshift.withCredentials() {

                        openshift.withProject('${APP_NAME_DEV}') {

                          def autoScaler = openshift.selector('hpa','${SERVICE_NAME}-${SERVICE_VERSION}').exists()
                          if (autoScaler) {
                            openshift.raw('delete','hpa ${SERVICE_NAME}-${SERVICE_VERSION}')
                          }

                          def stockProcessorServiceDeploymentConfig = openshift.selector('dc','${SERVICE_NAME}-${SERVICE_VERSION}')
                          def scaleResult = openshift.raw('autoscale','dc/${SERVICE_NAME}-${SERVICE_VERSION} --min ${SERVICE_REPLICAS_MIN} --max ${SERVICE_REPLICAS_MAX} --cpu-percent=${SERVICE_CPU}')
                          echo "Service [${SERVICE_NAME}] has been autoscaled to [${SERVICE_REPLICAS_MIN},${SERVICE_REPLICAS_MAX}] replicas."

                          def latestDeploymentVersion = openshift.selector('dc',"${SERVICE_NAME}-${SERVICE_VERSION}").object().status.latestVersion
                          def rc = openshift.selector('rc', "${SERVICE_NAME}-${SERVICE_VERSION}-${latestDeploymentVersion}")

                          rc.untilEach(1) {
                            def rcMap = it.object()
                            return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
                          }

                        }
                    }

                  }
              }
            }

            node {
              stage("FINISH") {
              }
            }

          }
          catch (err) {
            echo "in catch block"
            echo "Caught: ${err}"
            currentBuild.result = 'FAILURE'
            throw err
          }
        type: JenkinsPipeline
    triggers:
      - generic:
          allowEnv: true
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
- apiVersion: "v1"
  kind: "BuildConfig"
  metadata:
    name: "sales-scale-infra-pipeline"
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          try {
            node {
              stage("INIT") {
              }
            }
            node("maven") {

              stage("SCALE") {

                  openshift.withCluster() {

                    openshift.withCredentials() {

                        openshift.withProject('${APP_NAME_DEV}') {

                          def stockProcessorServiceDeploymentConfig = openshift.selector('dc','${SERVICE_NAME}')
                          def scaleResult = openshift.raw('scale','dc/${SERVICE_NAME} --replicas=${SERVICE_REPLICAS}')
                          echo "Service [${SERVICE_NAME}] has been scaled to [${SERVICE_REPLICAS}] replicas."

                          def latestDeploymentVersion = openshift.selector('dc',"${SERVICE_NAME}").object().status.latestVersion
                          def rc = openshift.selector('rc', "${SERVICE_NAME}-${latestDeploymentVersion}")

                          rc.untilEach(1) {
                            def rcMap = it.object()
                            return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
                          }

                        }
                    }

                  }
              }
            }

            node {
              stage("FINISH") {
              }
            }

          }
          catch (err) {
            echo "in catch block"
            echo "Caught: ${err}"
            currentBuild.result = 'FAILURE'
            throw err
          }
        type: JenkinsPipeline
    triggers:
      - generic:
          allowEnv: true
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
- apiVersion: "v1"
  kind: "BuildConfig"
  metadata:
    name: "sales-deploy-ticket-processor-pipeline"
  spec:
    strategy:
      jenkinsPipelineStrategy:
        env:
          - name: TICKETING_SERVICE_VERSION
            value: v1
        jenkinsfile: |-
          try {
            def appName=""
            def projectName=""
            node {
              stage("INIT") {
              }
            }
            node("maven") {
              stage("CHECKOUT") {
                  git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}"
              }
              stage("DEPLOY") {

                  openshift.withCluster() {

                    openshift.withCredentials() {

                        openshift.withProject('${APP_NAME_DEV}') {

                          def ticketProcessorSecret = openshift.selector('secret','ticket-processor-service-secret').exists()

                          if (!ticketProcessorSecret) {
                              dir("doc") {
                                  openshift.raw('create','-f ticket-processor-service-secret.yaml')
                                  echo "Secret has been created."
                              }
                          }
                          else {
                              echo "Secret already exists."
                          }

                          dir("ticket-processor-service") {
                              sh "mvn fabric8:deploy -P openshift -Dfabric8.namespace=${APP_NAME_DEV} -Dopenshift.namespace=${APP_NAME_DEV} -Dproject.version=${TICKETING_SERVICE_VERSION}"
                          }

                          def ticketServiceDeploymentConfig = openshift.selector('dc','ticket-processor-service-${TICKETING_SERVICE_VERSION}')
                          ticketServiceDeploymentConfig.rollout().status()

                        }
                    }

                  }
              }
            }
            node {
              stage("FINISH") {

              }
            }
          }
          catch (err) {
            echo "in catch block"
            echo "Caught: ${err}"
            currentBuild.result = 'FAILURE'
            throw err
          }
        type: JenkinsPipeline
    triggers:
      - generic:
          allowEnv: true
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - github:
          secret: "${GENERIC_WEBHOOK_SECRET}"
        type: GitHub
- apiVersion: "v1"
  kind: "BuildConfig"
  metadata:
    name: "sales-deploy-ticket-processor-endpoint-pipeline"
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          try {
            def appName=""
            def projectName=""
            node {
              stage("INIT") {
              }
            }
            node("maven") {
              stage("CHECKOUT") {
                  git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}"
              }
              stage("DEPLOY") {

                  openshift.withCluster() {

                    openshift.withCredentials() {

                        openshift.withProject('${APP_NAME_DEV}') {

                          dir("ticket-processor-endpoint") {
                              sh "mvn fabric8:deploy -P openshift -Dfabric8.namespace=${APP_NAME_DEV} -Dopenshift.namespace=${APP_NAME_DEV}"
                          }

                          def ticketServiceDeploymentConfig = openshift.selector('dc','ticket-processor-endpoint')
                          ticketServiceDeploymentConfig.rollout().status()

                        }
                    }

                  }
              }
            }
            node {
              stage("FINISH") {

              }
            }
          }
          catch (err) {
            echo "in catch block"
            echo "Caught: ${err}"
            currentBuild.result = 'FAILURE'
            throw err
          }
        type: JenkinsPipeline
    triggers:
      - generic:
          allowEnv: true
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
      - github:
          secret: "${GENERIC_WEBHOOK_SECRET}"
        type: GitHub
- apiVersion: "v1"
  kind: "BuildConfig"
  metadata:
    name: "sales-deploy-stock-processor-pipeline"
  spec:
    strategy:
      jenkinsPipelineStrategy:
        env:
          - name: STOCK_PROCESSOR_SERVICE_VERSION
            value: v1
        jenkinsfile: |-
          try {
            def appName=""
            def projectName=""
            node {
              stage("INIT") {
              }
            }
            node("maven") {
              stage("CHECKOUT") {
                  git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}"
              }
              stage("DEPLOY") {

                  openshift.withCluster() {

                    openshift.withCredentials() {

                        openshift.withProject('${APP_NAME_DEV}') {

                          def stockProcessorSecret = openshift.selector('secret','stock-processor-service-secret').exists()

                          if (!stockProcessorSecret) {
                              dir("doc") {
                                  openshift.raw('create','-f stock-processor-service-secret.yaml')
                                  echo "Secret has been created."
                              }
                          }
                          else {
                              echo "Secret already exists."
                          }

                          dir("stock-processor-service") {
                              sh "mvn fabric8:deploy -P openshift -Dfabric8.namespace=${APP_NAME_DEV} -Dopenshift.namespace=${APP_NAME_DEV} -Dproject.version=${STOCK_PROCESSOR_SERVICE_VERSION}"
                          }

                          def stockProcessorServiceDeploymentConfig = openshift.selector('dc','stock-processor-service-${STOCK_PROCESSOR_SERVICE_VERSION}')
                          stockProcessorServiceDeploymentConfig.rollout().status()

                        }
                    }

                  }
              }
            }
            node {
              stage("FINISH") {

              }
            }
          }
          catch (err) {
            echo "in catch block"
            echo "Caught: ${err}"
            currentBuild.result = 'FAILURE'
            throw err
          }
        type: JenkinsPipeline
    triggers:
      - generic:
          allowEnv: true
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
- apiVersion: "v1"
  kind: "BuildConfig"
  metadata:
    name: "sales-deploy-stock-query-pipeline"
  spec:
    strategy:
      jenkinsPipelineStrategy:
        env:
          - name: STOCK_QUERY_SERVICE_VERSION
            value: v1
        jenkinsfile: |-
          try {
            def appName=""
            def projectName=""
            node {
              stage("INIT") {
              }
            }
            node("maven") {
              stage("CHECKOUT") {
                  git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}"
              }
              stage("DEPLOY") {

                  openshift.withCluster() {

                    openshift.withCredentials() {

                        openshift.withProject('${APP_NAME_DEV}') {

                          def stockQueryServicePods=""
                          def stockQueryService = openshift.selector('dc','stock-query-service-${STOCK_QUERY_SERVICE_VERSION}').exists()
                          def stockQuerySecret = openshift.selector('secret','stock-query-service-secret').exists()

                          echo "stockQueryService [${stockQueryService}]"

                          if (!stockQuerySecret) {
                              dir("doc") {
                                  openshift.raw('create','-f stock-query-service-secret.yaml')
                                  echo "Secret has been created."
                              }
                          }
                          else {
                              echo "Secret already exists."
                          }

                          dir("stock-query-service") {
                              sh "mvn fabric8:deploy -P openshift -Dfabric8.namespace=${APP_NAME_DEV} -Dopenshift.namespace=${APP_NAME_DEV} -Dproject.version=${STOCK_QUERY_SERVICE_VERSION}"
                          }

                          def stockQueryDeploymentConfig = openshift.selector('dc','stock-query-service-${STOCK_QUERY_SERVICE_VERSION}')
                          stockQueryDeploymentConfig.rollout().status()

                        }
                    }

                  }
              }
            }
            node {
              stage("FINISH") {

              }
            }
          }
          catch (err) {
            echo "in catch block"
            echo "Caught: ${err}"
            currentBuild.result = 'FAILURE'
            throw err
          }
        type: JenkinsPipeline
    triggers:
      - generic:
          allowEnv: true
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
- apiVersion: "v1"
  kind: "BuildConfig"
  metadata:
    name: "sales-init-pipeline"
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          try {
            def appName=""
            def projectName=""
            def result=""
            node {
              stage("INIT") {
              }
            }
            node("maven") {
              stage("PROJECTS-CREATION") {
                  openshift.withCluster() {
                      openshift.withCredentials() {

                          def devProject = openshift.selector('project','${APP_NAME_DEV}').exists()
                          if (!devProject) {
                              result = openshift.raw('new-project','${APP_NAME_DEV}','--display-name=${APP_NAME_DEV}','--description=${APP_NAME_DEV}')
                              echo "Project [${APP_NAME_DEV}] has been created."
                          }
                          else {
                              echo "Project [${APP_NAME_DEV}] already exists."
                          }
                          def preProject = openshift.selector('project','${APP_NAME_PRE}').exists()
                          if (!preProject) {
                              result = openshift.raw('new-project','${APP_NAME_PRE}','--display-name=${APP_NAME_PRE}','--description=${APP_NAME_PRE}')
                              echo "Project [${APP_NAME_PRE}] has been created."
                          }
                          else {
                              echo "Project [${APP_NAME_PRE}] already exists."
                          }
                          def proProject = openshift.selector('project','${APP_NAME_PRO}').exists()
                          if (!proProject) {
                              result = openshift.raw('new-project','${APP_NAME_PRO}','--display-name=${APP_NAME_PRO}','--description=${APP_NAME_PRO}')
                              echo "Project [${APP_NAME_PRO}] has been created."
                          }
                          else {
                              echo "Project [${APP_NAME_PRO}] already exists."
                          }

                          openshift.raw('policy','add-role-to-user edit system:serviceaccount:${OCP_DEVOPS_PROJECT_ID}:jenkins -n ${APP_NAME_DEV}')
                          openshift.raw('policy','add-role-to-user edit system:serviceaccount:${OCP_DEVOPS_PROJECT_ID}:jenkins -n ${APP_NAME_PRE}')
                          openshift.raw('policy','add-role-to-user edit system:serviceaccount:${OCP_DEVOPS_PROJECT_ID}:jenkins -n ${APP_NAME_PRO}')
                          openshift.raw('policy','add-role-to-group system:image-puller system:serviceaccounts:${APP_NAME_PRE} -n ${APP_NAME_DEV}')
                          openshift.raw('policy','add-role-to-group system:image-puller system:serviceaccounts:${APP_NAME_PRO} -n ${APP_NAME_DEV}')

                      }
                  }
              }
            }
            node {
              stage("FINISH") {
              }
            }
          }
          catch (err) {
            echo "in catch block"
            echo "Caught: ${err}"
            currentBuild.result = 'FAILURE'
            throw err
          }
        type: JenkinsPipeline
    triggers:
      - generic:
          allowEnv: true
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
- apiVersion: "v1"
  kind: "BuildConfig"
  metadata:
    name: "sales-prereqs-pipeline"
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          try {
            def appName=""
            def projectName=""
            def result=""
            node {
              stage("INIT") {
              }
            }
            node("maven") {
              stage("PREREQS") {
                  openshift.withCluster() {
                      openshift.withCredentials() {

                          openshift.withProject('openshift') {
                              def template
                              def templateSelector = openshift.selector( 'template', "amq-broker-71-statefulset-clustered")
                              def templateExists = templateSelector.exists()

                              if (!templateExists) {
                                  openshift.raw('create','-n openshift','-f https://raw.githubusercontent.com/jboss-container-images/jboss-amq-7-broker-openshift-image/71-1.0.TP/templates/amq-broker-71-statefulset-clustered.yaml')
                                  openshift.raw('replace','-n openshift','-f https://raw.githubusercontent.com/jboss-container-images/jboss-amq-7-broker-openshift-image/71-1.0.TP/templates/amq-broker-71-statefulset-clustered.yaml')
                                  echo "Image [amq-broker-71-statefulset-clustered] has been created."
                              }
                              else {
                                  echo "Image [amq-broker-71-statefulset-clustered] already exists."
                                  template = templateSelector.object()
                              }

                          }
                          openshift.raw('policy','add-role-to-user view -z default')
                          echo "view add-role-to-user to default has been set."
                      }
                  }
              }
            }
            node {
              stage("FINISH") {
              }
            }
          }
          catch (err) {
            echo "in catch block"
            echo "Caught: ${err}"
            currentBuild.result = 'FAILURE'
            throw err
          }
        type: JenkinsPipeline
    triggers:
      - generic:
          allowEnv: true
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
- apiVersion: "v1"
  kind: "BuildConfig"
  metadata:
    name: "sales-infra-pipeline"
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          try {
            def appName="sales-event-store"
            def appReplicasCount="2"
            node {
              stage("INIT") {
              }
            }
            node("maven") {
              stage("AMQ") {
                  openshift.withCluster() {
                      openshift.withCredentials() {
                          openshift.withProject('${APP_NAME_DEV}') {

                            def salesStatefulSet = openshift.selector('statefulset','sales-event-store-amq').exists()

                            if (!salesStatefulSet) {

                                  echo "Application [sales-event-store] has to be installed."
                                  def rawResult = openshift.raw('new-app','--template=amq-broker-71-statefulset-clustered -p APPLICATION_NAME=sales-event-store -p AMQ_NAME=sales-event-store -p AMQ_CLUSTERED=true -p AMQ_CLUSTER_USER=sales-event-store -p AMQ_CLUSTER_PASSWORD=sales-event-store -p AMQ_REPLICATED=true -p AMQ_REPLICAS=2')
                                  echo "Application [sales-event-store] pods has been prepared."

                                  timeout(30) {
                                    waitUntil {
                                       openshift.selector('pod', [app: "sales-event-store-amq"]).count() > 1
                                    }
                                  }

                                  def salesAppPods = openshift.selector('pod', [app: "sales-event-store-amq"])

                                  salesAppPods.untilEach {
                                      echo "[sales-event-store,${it.name()},${it.object().status.containerStatuses[0].ready}]"
                                      return it.object().status.containerStatuses[0].ready
                                  }

                                  echo "Application [sales-event-store] has been created."

                            }
                            else {
                              def numSalesAppPods = openshift.selector('pod', [app: "sales-event-store-amq"]).count()
                              echo "Application [sales-event-store] already exists with [${numSalesAppPods}] running pods."
                            }


                          }
                      }
                  }
              } // end stage("AMQ")

              stage("DG") {
                openshift.withCluster() {
                    openshift.withCredentials() {

                        openshift.withProject('${APP_NAME_DEV}') {

                          def salesDataStore = openshift.selector('dc','sales-data-store').exists()
                          if (!salesDataStore) {

                              echo "Application [sales-data-store] has to be installed."
                              def rawResult = openshift.raw('new-app','--template=datagrid73-basic -p USERNAME=sales-data-store -p PASSWORD=sales-data-store-Mypassword123_ -p APPLICATION_NAME=sales-data-store -p INFINISPAN_CONNECTORS=rest,hotrod,memcached -p CACHE_NAMES=STOCK -p HOTROD_AUTHENTICATION=true -p CONTAINER_SECURITY_ROLE_MAPPER=identity-role-mapper -p CONTAINER_SECURITY_ROLES=sales-data-store=ALL -p ADMIN_GROUP=REST,___schema_manager,sales-data-store -p MEMCACHED_CACHE=""')
                              echo "Application [sales-data-store] pods has been prepared."

                              salesDataStore = openshift.selector('dc','sales-data-store')
                              salesDataStore.rollout().status()

                              echo "Application [sales-data-store] has to be updated."
                              rawResult = openshift.raw("set","env dc/sales-data-store STOCK_CACHE_START=EAGER STOCK_CACHE_SECURITY_AUTHORIZATION_ENABLED=true  STOCK_CACHE_SECURITY_AUTHORIZATION_ROLES=sales-data-store,___schema_manager,___script_manager HOTROD_AUTHENTICATION=true  CONTAINER_SECURITY_ROLE_MAPPER=identity-role-mapper CONTAINER_SECURITY_ROLES=sales-data-store\\=ALL  ADMIN_GROUP=REST,___schema_manager,sales-data-store")

                              salesDataStore = openshift.selector('dc','sales-data-store')
                              salesDataStore.rollout().status()

                              echo "Application [sales-data-store] has been updated."

                              salesDataStore = openshift.selector('dc','sales-data-store')
                              
                              def scaleResult = openshift.raw('scale','dc/sales-data-store --replicas=2')
                              echo "Service [sales-data-store] has been scaled."

                              def latestDeploymentVersion = openshift.selector('dc',"sales-data-store").object().status.latestVersion
                              def rc = openshift.selector('rc', "sales-data-store-${latestDeploymentVersion}")

                              rc.untilEach(1) {
                                def rcMap = it.object()
                                return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
                              }

                          }
                          else {
                              def numSalesDataStorePods = openshift.selector('pod', [application: "sales-data-store"]).count()
                              echo "Application [sales-data-store] already exists with [${numSalesDataStorePods}] running pods."
                          }
                        }
                    }
                }
              } // end

            }
            node {
              stage("FINISH") {
              }
            }
          }
          catch (err) {
            echo "in catch block"
            echo "Caught: ${err}"
            currentBuild.result = 'FAILURE'
            throw err
          }
        type: JenkinsPipeline
    triggers:
      - generic:
          allowEnv: true
          secret: ${GENERIC_WEBHOOK_SECRET}
        type: Generic
